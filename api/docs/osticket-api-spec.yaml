openapi: 3.0.1
info:
  title: osTicket API
  description: |
    The *osTicket API* is a *RESTful web service* that allows users to interact
    programmatically with the osTicket helpdesk system. osTicket is an open-source support
    ticket system that enables organizations to efficiently manage customer inquiries, issues,
    and tickets.
    
    This document provides detailed information about available endpoints,
    request and response formats, authentication methods, error handling, and best practices
    for API usage. It serves as a comprehensive resource for developers looking to integrate
    osTicket with their applications or systems.

    *The available endpoints are grouped as follows:*

    - *Departments:* Provides operations to create, update and delete departments, as well
    as an operation to get the IDs of the available departments in the system.

    - *SLA (Service-Level Agreement):* Provides operations to create, update and delete SLAs, as well
    as an operation to get the IDs of the available SLAs in the system. These SLAs can be associated
    to tickets and departments.

    - *Staff:* Provides operations to create, update and delete staff members, as well as an
    operation to get the IDs of the available staff members in the system.

    - *Teams:* Provides operations to create, update and delete teams, as well as an operation to get
    the IDs of the available teams in the system.

    - *Tickets:* Provides operations to create, update and delete tickets, as well as an operation
    to get and filter the IDs of the available tickets in the system based on various properties.

    - *Ticket Priorities:* Provides an operation to get the IDs of the available ticket properties
    in the system.

    - *Ticket Status:* Provides an operation to get the available ticket status IDs in the system.

    - *Ticket Topics:* Provides operations to create, update and delete ticket topics, as well as
    an operation to get the IDs of the available ticket topics in the system.

    - *Users:* Provides operations to create, update and delete users, as well as an operation to
    get the IDs of the available users in the system.

    #### Authentication
    Authentication via the API is done via API keys configured inside the osTicket admin panel.
    API keys are created and tied to a source IP address, which will be checked against the source
    IP of requests to the HTTP API. API keys can be created and managed via the admin panel.

    Navigate to Manage -> API keys. Use 'Add New API Key' to create a new API key.
    
    All HTTP requests require the presence of a valid API key in the authorization header. Header key: X-API-Key
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - description: Localhost server for testing
    url: http://localhost/osticket/api/
security:
  - APIKeyAuth: []
tags:
    - name: Departments

    - name: SLA (Service-Level Agreement)
    - name: Staff
    - name: Teams
    - name: Tickets
    - name: Ticket Priorities
    - name: Ticket Status
    - name: Ticket Topics
    - name: Users
paths:
  /https://host/osTicketBase/http.php/departments.json:
    description: This resource handles all department-related operations
    get:
      tags:
        - Departments
      summary: Get department IDs
      description: |
        Retrieves a list of department IDs available in the system.

        Departments represent organizational units within the ticketing system.
        Each department is identified by a unique ID.

        This endpoint allows clients to fetch the list of available department IDs,
        which can be used for various purposes such as ticket assignment or filtering.

        NOTE: For ease of identification, department names are provided alongside their
        respective IDs in the response.
      operationId: getDepartmentIds
      security:
        - APIKeyAuth: []
      responses:
        '200':
          description: Department IDs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  depts:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The ID of the department.
                        name:
                          type: string
                          description: The name of the department.
                example: 
                  depts:
                    - id: 1
                      name: Department A
                    - id: 2
                      name: Department B
                    - id: 5
                      name: Department C
                description: The IDs and names of the available departments.
        '401':
          description: Valid API key required
        '500':
          description: Internal server error
    post:
      tags:
        - Departments
      summary: Create a new department
      description: |
        This endpoint allows the creation of a new department in the system.

        To create a new department, the request body must include the following parameters:
        
        - `name`: The name of the department.

        - `ispublic`: A string representation of a boolean value indicating whether the department
        is publicly visible. (optional)
        
        - `sla_id`: The ID of the Service-Level Agreement (SLA) associated with the department. (optional)

        If `ispublic` isn't provided, the department will be public by default. If `sla_id` isn't
        provided, the department will use the system's default SLA.

        This endpoint returns the ID of the newly created department.
      operationId: createDepartment
      security:
        - APIKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the department.
                ispublic:
                  type: string
                  description: A string representation of a boolean value indicating whether the department
                    is publicly visible.
                  example: "1"
                sla_id:
                  type: integer
                  description: The ID of the Service-Level Agreement (SLA) associated with the department.
                  required:
                    - name
                    - isPublic
      responses:
        '201':
          description: Department created successfully
          content:
            application/json:
              schema:
                type: integer
                example: 3
                description: The ID of the newly created department.
        '400':
          $ref: "#/components/responses/BadRequest2"
        '401':
          description: Valid API key required
        '500':
          description: Internal server error
    put:
      tags:
        - Departments
      summary: Update an existing department
      description: |
        This endpoint allows the update of an existing department in the system.

        To update a department, the request body must include the following parameters:

        - `id`: The department's ID.
        
        - `name`: The name of the department. (optional)
        
        - `ispublic`: A string representation of a boolean value indicating whether the department
        is publicly visible. (optional)
        
        - `sla_id`: The ID of the Service-Level Agreement (SLA) associated with the department. (optional)

        NOTE: All updatable properties are optional, meaning, the client can choose which properties to update.
        If no updatable property is provided, an error message will be returned.
      operationId: updateDepartment
      security:
        - APIKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: The department's ID.
                name:
                  type: string
                  description: The name of the department.
                ispublic:
                  type: string
                  description: A string representation of a boolean value indicating whether the department
                    is publicly visible.
                  example: "1"
                sla_id:
                  type: integer
                  description: The ID of the Service-Level Agreement (SLA) associated with the department.
                  required:
                    - id
      responses:
        '204':
          description: Department updated successfully
        '400':
          $ref: '#/components/responses/BadRequest3'
        '401':
          description: Valid API key required
        '404':
          description: Department not found
        '500':
          description: Internal server error
    delete:
      tags:
        - Departments
      summary: Delete an existing department
      description: |
        This endpoint allows the deletion of an existing department in the system.

        To delete a department, provide the department's ID, `id`, as a query parameter.
      operationId: deleteDepartment
      security:
        - APIKeyAuth: []
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          description: The ID of the department to be deleted.
          required: true
      responses:
        '204':
          description: Department deleted successfully
        '400':
          description: Invalid query parameter
        '401':
          description: Valid API key required
        '404':
          description: Department not found
        '500':
          description: Internal server error
  /https://host/osTicketBase/http.php/sla.json:
    description: This resource handles all SLA-related operations
    get:
      tags:
        - SLA (Service-Level Agreement)
      summary: Get SLA IDs
      description: |
        Retrieves a list of SLA IDs available in the system.
        
        SLA IDs are used to represent different service-level agreements for tickets and departments.

        The endpoint does not require any parameters. It returns a list of available SLA IDs

        NOTE: For ease of identification, SLA names are provided alongside their
        respective IDs in the response.
      operationId: getSlaIds
      security:
        - APIKeyAuth: []
      responses:
        '200':
          description: SLA IDs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  slas:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                    example:
                      - id: 1
                        name: "SLA 1"
                      - id: 2
                        name: "SLA 2"
                      - id: 3
                        name: "SLA 3"
                description: |
                  The IDs and names of the available SLAs.
        '401':
          description: Valid API key required
        '500':
          description: Internal server error
    post:
      tags:
        - SLA (Service-Level Agreement)
      summary: Create a new SLA
      description: |
        This endpoint allows the creation of a new SLA in the system.

        To create a new SLA, the request body must include the following parameters:
        
        - `name`: The name of the SLA.
        
        - `grace_period`: The grace period, in hours, for resolving tickets within the SLA timeframe.

        This endpoint returns the ID of the newly created SLA.
      operationId: createSla
      security:
        - APIKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the SLA.
                grace_period:
                  type: integer
                  description: The grace period, in hours, for resolving tickets within the SLA timeframe.
                  example: 72
                  required:
                    - name
                    - grace_period
      responses:
        '201':
          description: SLA created successfully
          content:
            application/json:
              schema:
                type: integer
                example: 2
                description: The ID of the newly created SLA.
        '400':
          $ref: "#/components/responses/BadRequest2"
        '401':
          description: Valid API key required
        '500':
          description: Internal server error
    put:
      tags:
        - SLA (Service-Level Agreement)
      summary: Update an existing SLA
      description: |
        This endpoint allows the update of an existing SLA in the system.

        To update a SLA, the request body may include the following parameters:
        
        - `id`: The ID of the SLA.
        
        - `name`: The name of the SLA. (optional)
        
        - `grace_period`: The grace period, in hours, for resolving tickets within the SLA timeframe. (optional)

        NOTE: All updatable properties are optional, meaning, the client can choose which properties to update.
        If no updatable property is provided, an error message will be returned.
      operationId: updateSla
      security:
        - APIKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: The ID of the SLA.
                name:
                  type: string
                  description: The name of the SLA.
                grace_period:
                  type: integer
                  description: The grace period, in hours, for resolving tickets within the SLA timeframe.
                  example: 72
                  required:
                    - id
      responses:
        '204':
          description: SLA updated successfully
        '400':
          $ref: '#/components/responses/BadRequest3'
        '401':
          description: Valid API key required
        '404':
          description: SLA not found
        '500':
          description: Internal server error
    delete:
      tags:
        - SLA (Service-Level Agreement)
      summary: Delete an existing SLA
      description: |
        This endpoint allows the deletion of an existing SLA in the system.

        To delete an SLA, provide the SLA's ID, `id`, as a query parameter.
      operationId: deleteSla
      security:
        - APIKeyAuth: []
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          description: The ID of the SLA to be deleted.
          required: true
      responses:
        '204':
          description: SLA deleted successfully
        '400':
          description: Invalid query parameter
        '401':
          description: Valid API key required
        '404':
          description: SLA not found
        '500':
          description: Internal server error
  /https://host/osTicketBase/http.php/staff.json:
    description: This resource handles all staff-related operations
    get:
      tags:
        - Staff
      summary: Get staff member IDs
      description: |
        This endpoint retrieves the IDs of all staff members in the system.
        
        Staff IDs are unique identifiers assigned to each staff member. This information can be useful for various administrative purposes, such as assigning tasks or permissions.

        The response will include an array of staff IDs.

        NOTE: For ease of identification, the staff members' names, usernames, and email addresses are provided alongside their
        respective IDs in the response.
      operationId: getStaffIds
      security:
        - APIKeyAuth: []
      responses:
        '200':
          description: Staff IDs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  staff:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        username:
                          type: string
                        email:
                          type: string
                example:
                  - id: 1
                    name: "John Doe"
                    username: "jdoe"
                    email: "jdoe@example.com"
                  - id: 2
                    name: "Jane Smith"
                    username: "jsmith"
                    email: "jsmith@example.com"
                  - id: 5
                    name: "Alice Johnson"
                    username: "ajohnson"
                    email: "ajohnson@example.com"
                description: |
                  The IDs and names of the available staff members.
        '401':
          description: Valid API key required
        '500':
          description: Internal server error
    post:
      tags:
        - Staff
      summary: Create a new staff member (agent)
      description: |
        This endpoint allows the creation of a new staff member (agent) in the system.

        To create a new staff member, the request body must include the following parameters:
        
        - `firstname`: The staff member's first name.
        
        - `lastname`: The staff member's last name.
        
        - `username`: The staff member's username.
        
        - `email`: The staff member's email address.
        
        - `dept_id`: The staff member's primary department.
        
        - `isadmin`: A boolean value indicating whether the staff member has administrative privileges.

        This endpoint returns the ID and the initial password of the newly created staff member.

        NOTE: Upon successful creation of the staff member, an email will be automatically sent to the
        provided email address containing instructions on how to reset the password. This ensures the
        security of the account and allows the staff member to set their own unique password.
      operationId: createStaff
      security:
        - APIKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  description: The staff member's first name.
                lastname:
                  type: string
                  description: The staff member's last name.
                username:
                  type: string
                  description: The staff member's username.
                email:
                  type: string
                  format: email
                  description: The staff member's email address.
                dept_id:
                  type: integer
                  description: The ID of the staff member's primary department.
                isadmin:
                  type: boolean
                  description: A boolean value indicating whether the staff member has administrative privileges.
              required:
                - firstname
                - lastname
                - username
                - email
                - dept_id
                - isadmin
      responses:
        '201':
          description: Staff member created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The ID of the newly created staff member.
                  passwd:
                    type: string
                    example: "changeit"
                    description: The password of the newly created staff member.
                description: The ID and password of the newly created staff member.
        '400':
          description: Syntax error or invalid input
          content:
            text/plain:
              schema:
                type: string
              examples:
                syntax_error:
                  value: Syntax error, malformed JSON
                invalid_email:
                  value: "email: Email already in use by another agent"
                invalid_username:
                  value: "username: Username already in use"
                invalid_dept_id:
                  value: "dept_id: Department not found"
        '401':
          description: Valid API key required
        '500':
          description: Internal server error
    put:
      tags:
      - Staff
      summary: Update an existing staff member (agent)
      description: |
        This endpoint allows the update of a staff member (agent) in the system.

        To update a staff member, the request body may include the following parameters:
        
        - `id`: The ID of the staff member to update.
        
        - `firstname`: The staff member's first name. (optional)
        
        - `lastname`: The staff member's last name. (optional)
        
        - `username`: The staff member's username. (optional)
        
        - `email`: The staff member's email address. (optional)
        
        - `dept_id`: The staff member's primary department. (optional)
        
        - `isadmin`: A boolean value indicating whether the staff member has administrative privileges. (optional)

        NOTE: All updatable properties are optional, meaning, the client can choose which properties to update.
        If no updatable property is provided, an error message will be returned.
      operationId: updateStaff
      security:
        - APIKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: The ID of the staff member to update.
                firstname:
                  type: string
                  description: The staff member's first name.
                lastname:
                  type: string
                  description: The staff member's last name.
                username:
                  type: string
                  description: The staff member's username.
                email:
                  type: string
                  format: email
                  description: The staff member's email address.
                dept_id:
                  type: integer
                  description: The ID of the staff member's primary department.
                isadmin:
                  type: boolean
                  description: A boolean value indicating whether the staff member has administrative privileges.
              required:
                - id
      responses:
        '204':
          description: Staff member updated successfully
        '400':
          description: Syntax error, missing ID, missing updatable properties or invalid input
          content:
            text/plain:
              schema:
                type: string
              examples:
                syntax_error:
                  value: Syntax error, malformed JSON
                missing_properties:
                  value: Missing updatable properties
                missing_id:
                  value: Missing required ID
                invalid_email:
                  value: "email: Email already in use by another agent"
                invalid_username:
                  value: "username: Username already in use"
                invalid_dept_id:
                  value: "dept_id: Department not found"
                invalid_id:
                  value: "id: Staff member not found"
        '401':
          description: Valid API key required
        '404':
          description: Staff member not found
        '500':
          description: Internal server error
    delete:
      tags:
        - Staff
      summary: Delete an existing staff member (agent)
      description: |
        This endpoint allows the deletion of an existing staff member in the system.

        To delete a staff member, provide the staff member's ID, `id`, as a query parameter.
      operationId: deleteStaff
      security:
        - APIKeyAuth: []
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          description: The ID of the staff member to be deleted.
          required: true
      responses:
        '204':
          description: Staff member deleted successfully
        '400':
          description: Invalid query parameter
        '401':
          description: Valid API key required
        '404':
          description: Staff member not found
        '500':
          description: Internal server error
  /https://host/osTicketBase/http.php/teams.json:
    description: This resource handles all team-related operations
    get:
      tags:
        - Teams
      summary: Get team IDs
      description: |
        Retrieves a list of team IDs available in the system.

        The response contains a list of team IDs that can be used to assign a ticket to a team.

        NOTE: For ease of identification, team names are provided alongside their
        respective IDs in the response.
      operationId: getTeamIds
      security:
        - APIKeyAuth: []
      responses:
        '200':
          description: Team IDs and names retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  teams:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                    example:
                      - id: 1
                        name: "Team Alpha"
                      - id: 2
                        name: "Team Beta"
                      - id: 3
                        name: "Team Gamma"
                description: |
                  The IDs and names of the available teams.
        '401':
          description: Valid API key required
        '500':
          description: Internal server error
    post:
      tags:
        - Teams
      summary: Create a new team
      description: |
        This endpoint allows the creation of a new team in the system.

        To create a new team, the request body must include the following parameters:
        
        - `name`: The name of the team.
        
        - `members`: The IDs of the staff members that are part of this team. (optional)

        This endpoint returns the ID of the newly created team.

        NOTE: If any members specified in `members` are invalid (i.e., they do not exist),
        the team will still be created, but no members will be assigned to it.
      operationId: createTeam
      security:
        - APIKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the team.
                members:
                  type: array
                  items:
                    type: integer
                  nullable: true
                  description: The IDs of the staff members that are part of this team.
                  example: [1, 2]
                  required:
                    - name
      responses:
        '201':
          description: Team created successfully
          content:
            application/json:
              schema:
                type: integer
                example: 2
                description: The ID of the newly created Team.
        '400':
          description: Syntax error, missing name, invalid name or invalid team members
          content:
            text/plain:
              schema:
                type: string
              examples:
                syntax_error:
                  value: Syntax error, malformed JSON
                missing_name:
                  value: "name: Team name is required"
                invalid_name:
                  value: "name: Team name already exists"
                invalid_staff_member:
                  value: "members: No such agent"
        '401':
          description: Valid API key required
        '500':
          description: Internal server error
    put:
      tags:
        - Teams
      summary: Update an existing team
      description: |
        This endpoint allows the update of an existing team in the system.

        To update a team, the request body must include the following parameters:
        
        - `id`: The ID of the team.
        
        - `name`: The name of the team. (optional)
        
        - `members`: The IDs of the staff members that are part of this team. (optional)
      
        NOTE: All updatable properties are optional, meaning, the client can choose which properties to update.
        If no updatable property is provided, an error message will be returned. If any members specified in
        `members` are invalid (i.e., they do not exist), the team will still be updated, but its members will
        remain unchanged. To remove all members from a team, pass an empty array as the value for the `members` parameter.
      operationId: updateTeam
      security:
        - APIKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: The ID of the team.
                name:
                  type: string
                  description: The name of the team.
                members:
                  type: array
                  items:
                    type: integer
                  nullable: true
                  description: The IDs of the staff members that are part of this team.
                  example: [1, 2]
                  required:
                    - id
      responses:
        '204':
          description: Team updated successfully
        '400':
          description: Syntax error, missing updatable properties, invalid name or invalid team members
          content:
            text/plain:
              schema:
                type: string
              examples:
                syntax_error:
                  value: Syntax error, malformed JSON
                missing_properties:
                  value: Missing updatable properties
                missing_id:
                  value: Missing required ID
                invalid_name:
                  value: "name: Team name already exists"
                invalid_staff_member:
                  value: "members: No such agent"
        '401':
          description: Valid API key required
        '404':
          description: Team not found
        '500':
          description: Internal server error
    delete:
      tags:
        - Teams
      summary: Delete an existing team
      description: |
        This endpoint allows the deletion of an existing team in the system.

        To delete a team, provide the team's ID, `id`, as a query parameter.
      operationId: deleteTeam
      security:
        - APIKeyAuth: []
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          description: The ID of the team to be deleted.
          required: true
      responses:
        '204':
          description: Team deleted successfully
        '400':
          description: Invalid query parameter
        '401':
          description: Valid API key required
        '404':
          description: Team not found
        '500':
          description: Internal server error
  /https://host/osTicketBase/http.php/tickets.json:
    description: This resource handles all ticket-related operations
    get:
      tags:
        - Tickets
      summary: Get ticket IDs
      description: |
        This endpoint allows users to search for tickets based on various properties.

        To search for tickets, you can provide query parameters in the URL:
        
        - `title`: The title or subject of the ticket.
        
        - `number`: The ticket number.
        
        - `status`: The status of the ticket.
        
        - `topicId`: The ID of the topic associated with the ticket.
        
        - `priorityId`: The priority ID of the ticket.
        
        - `deptId`: The department ID associated with the ticket.
        
        - `staffId`: The staff ID assigned to the ticket.
        
        - `teamId`: The team ID handling the ticket.
        
        - `createdDate`: The creation date of the ticket.

        All parameters are optional.
        If no parameter is provided, the search will return all tickets.
        If multiple parameters are provided, the search will return tickets that match all provided criteria.

        NOTE: The IDs returned refer to the `number` property, not the internal IDs used by osTicket. For ease of
        identification, the tickets' titles are provided alongside their respective IDs in the response.
      operationId: getTicketIds
      security:
        - APIKeyAuth: []
      parameters:
        - in: query
          name: title
          schema:
            type: string
          description: The title or subject of the ticket.
          example: "Example Title"
        - in: query
          name: number
          schema:
            type: string
          description: The ticket number.
          example: "123456"
        - in: query
          name: status
          schema:
            type: string
          description: The status of the ticket.
          example: "Open"
        - in: query
          name: topicId
          schema:
            type: integer
          description: The ID of the topic associated with the ticket.
          example: 1
        - in: query
          name: priorityId
          schema:
            type: integer
          description: The priority ID of the ticket.
          example: 2
        - in: query
          name: deptId
          schema:
            type: integer
          description: The department ID associated with the ticket.
          example: 3
        - in: query
          name: staffId
          schema:
            type: integer
          description: The staff ID assigned to the ticket.
          example: 4
        - in: query
          name: teamId
          schema:
            type: integer
          description: The team ID handling the ticket.
          example: 5
        - in: query
          name: createdDate
          schema:
            type: string
            format: date-time
          description: The creation date of the ticket.
          example: "2024-04-25T10:15:30Z"
      responses:
        '200':
          description: Ticket IDs obtained successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tickets:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        title:
                          type: string
                    example:
                      - id: 487102
                        title: "Ticket A"
                      - id: 557967
                        title: "Ticket B"
                      - id: 825773
                        title: "Ticket C"
                description: |
                  The IDs and titles of the tickets matching the search parameters.
        '401':
          description: Valid API key required
        '500':
          description: Internal server error
    post:
      tags:
        - Tickets
      summary: Create a new ticket
      description: |
        This endpoint allows users to create a new ticket in the system.

        To create a ticket, the request body must include the following parameters:
        
        - `name`: The name of the user creating the ticket. (optional, if email is valid)
        
        - `email`: The email address of the user creating the ticket.
        
        - `subject`: The subject of the ticket.
        
        - `message`: The message or description associated with the ticket.
        
        - `priorityId`: The priority level of the ticket. (optional)
        
        - `topicId`: The ID of the topic associated with the ticket. (optional)
        
        - `slaId`: The ID of the SLA (service-level agreement) associated with the ticket. (optional)
        
        - `deptId`: The ID of the department responsible for the ticket. (optional)
        
        - `staffId`: The ID of the staff member assigned to the ticket. (optional)
        
        - `teamId`: The ID of the team handling the ticket. (optional)
        
        - `statusId`: The initial status ID of the ticket. (optional)

        This endpoint returns the ID of the newly created ticket.

        NOTE: The ID returned refers to the `number` property, not the internal ID used by osTicket.
      operationId: createTicket
      security:
        - APIKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the user creating the ticket.
                email:
                  type: string
                  format: email
                  description: The email address of the user creating the ticket.
                subject:
                  type: string
                  description: The subject of the ticket.
                message:
                  type: string
                  description: The message or description associated with the ticket.
                priorityId:
                  type: integer
                  description: The priority level of the ticket.
                topicId:
                  type: integer
                  description: The ID of the topic associated with the ticket.
                slaId:
                  type: integer
                  description: The ID of the SLA (service-level agreement) associated with the ticket.
                deptId:
                  type: integer
                  description: The ID of the department responsible for the ticket.
                staffId:
                  type: integer
                  description: The ID of the staff member assigned to the ticket.
                teamId:
                  type: integer
                  description: The ID of the team handling the ticket.
                statusId:
                  type: integer
                  description: The initial status ID of the ticket.
              required:
                - email
                - subject
                - message
      responses:
        '201':
          description: Ticket created successfully
          content:
            application/json:
              schema:
                type: integer
                example: 487102
                description: The ID of the newly created ticket.
        '400':
          description: Syntax error, malformed JSON
        '401':
          description: Valid API key required
        '500':
          description: Internal server error
    put:
      tags:
        - Tickets
      summary: Update an existing ticket
      description: |
        This endpoint allows users to update the properties of a ticket in the system.

        To update a ticket, the request body must include the following parameters:
        
        - `ticketId`: The ID of the ticket to be updated.
        
        - `priorityId`: The priority level of the ticket. (optional)
        
        - `topicId`: The ID of the topic associated with the ticket. (optional)
        
        - `slaId`: The ID of the SLA (service-level agreement) associated with the ticket. (optional)
        
        - `deptId`: The ID of the department responsible for the ticket. (optional)
        
        - `staffId`: The ID of the staff member assigned to the ticket. (optional)
        
        - `teamId`: The ID of the team handling the ticket. (optional)
        
        - `statusId`: The status ID of the ticket. (optional)
        
        - `message`: A message sent from the user. (optional)
        
        - `reply`: A reply sent from a staff member. (optional)
        
        - `note`: An internal note posted by a staff member. (optional)

        NOTE: All updatable properties are optional, meaning, the client can choose which properties to update.
        If no updatable property is provided, an error message will be returned. `ticketId` refers to the `number`
        property, not the internal ID used by osTicket.
      operationId: updateTicket
      security:
        - APIKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ticketId:
                  type: integer
                  description: The ID of the ticket to be updated.
                priorityId:
                  type: integer
                  description: The priority level of the ticket.
                topicId:
                  type: integer
                  description: The ID of the topic associated with the ticket.
                slaId:
                  type: integer
                  description: The ID of the SLA (service-level agreement) associated with the ticket.
                deptId:
                  type: integer
                  description: The ID of the department responsible for the ticket.
                staffId:
                  type: integer
                  description: The ID of the staff member assigned to the ticket.
                teamId:
                  type: integer
                  description: The ID of the team handling the ticket.
                statusId:
                  type: integer
                  description: The status ID of the ticket.
                message:
                  type: object
                  properties:
                    title:
                      type: string
                      description: The title of the message sent from the user.
                    body:
                      type: string
                      description: The content of the message sent from the user.
                      example: "This is a message from the user."
                reply:
                  type: object
                  properties:
                    title:
                      type: string
                      nullable: true
                      description: The title of the reply sent from a staff member.
                    body:
                      type: string
                      description: The content of the reply sent from a staff member.
                      nullable: true
                      example: "This is a reply from a staff member."
                note:
                  type: object
                  properties:
                    title:
                      type: string
                      description: The title of the internal note posted by a staff member.
                    body:
                      type: string
                      description: The content of the internal note posted by a staff member.
                      nullable: true
                      example: "This is an internal note from a staff member."
              required:
                - ticketId
      responses:
        '204':
          description: Ticket updated successfully
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          description: Valid API key required
        '404':
          description: Ticket not found
        '423':
          description: Ticket locked
        '500':
          description: Internal server error
    delete:
      tags:
        - Tickets
      summary: Delete an existing ticket
      description: |
        This endpoint allows users to delete a ticket in the system.

        To delete a ticket, provide the ticket's ID, `ticketId`, as a query parameter.

        NOTE: `ticketId` refers to the `number` property, not the internal ID used by osTicket.
      operationId: deleteTicket
      security:
        - APIKeyAuth: []
      parameters:
        - in: query
          name: ticketId
          schema:
            type: integer
          description: The ID of the ticket to be deleted.
          required: true
      responses:
        '204':
          description: Ticket deleted successfully
        '400':
          description: Invalid query parameter
        '401':
          description: Valid API key required
        '404':
          description: Ticket not found
        '500':
          description: Internal server error
  /https://host/osTicketBase/http.php/priorities.json:
    description: This resource handles all priority-related operations
    get:
      tags:
        - Ticket Priorities
      summary: Get ticket priority IDs
      description: |
        Retrieves a list of ticket priority IDs available in the system.

        This endpoint allows users to retrieve a list of ticket priority IDs available in the system.
        Priority IDs are used to represent the priority levels assigned to tickets.

        The endpoint does not require any parameters. It returns a list of available priority IDs.

        NOTE: For ease of identification, priority names are provided alongside their respective IDs in
        the response.
      operationId: getPriorityIds
      security:
        - APIKeyAuth: []
      responses:
        '200':
          description: Ticket priority IDs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  priorities:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                    example:
                      - id: 1
                        name: "low"
                      - id: 2
                        name: "normal"
                      - id: 3
                        name: "high"
                      - id: 4
                        name: "emergency"
                description: |
                  The IDs and names of the available priorities.
        '401':
          description: Valid API key required
        '500':
          description: Internal server error
  /https://host/osTicketBase/http.php/status.json:
    description: This resource handles all status-related operations
    get:
      tags:
        - Ticket Status
      summary: Get status IDs
      description: |
        Retrieves a list of ticket status IDs available in the system.

        This endpoint allows users to retrieve a list of status IDs available in the system.
        Status IDs are used to represent the status of a ticket.

        The endpoint does not require any parameters. It returns a list of available status IDs.

        NOTE: For ease of identification, ticket status names are provided alongside their
        respective IDs in the response.
      operationId: getStatusIds
      security:
        - APIKeyAuth: []
      responses:
        '200':
          description: Status IDs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statuses:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                    example:
                      - id: 1
                        name: "Open"
                      - id: 2
                        name: "Resolved"
                      - id: 3
                        name: "Closed"
                description: |
                  The IDs and names of the available statuses.
        '401':
          description: Valid API key required
        '500':
          description: Internal server error
  /https://host/osTicketBase/http.php/topics.json:
    description: This resource handles all topic-related operations
    get:
      tags:
        - Ticket Topics
      summary: Get topic IDs
      description: |
        Retrieves a list of ticket topic IDs available in the system.

        The response contains a list of topic IDs that can be used to
        reference specific topics when creating or updating tickets.

        NOTE: For ease of identification, topic names are provided alongside their respective IDs in
        the response.
      operationId: getTopicIds
      security:
        - APIKeyAuth: []
      responses:
        '200':
          description: Topic IDs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  topics:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                    example:
                      - id: 1
                        name: "Topic A"
                      - id: 2
                        name: "Topic B"
                      - id: 3
                        name: "Topic C"
                description: |
                  The IDs and names of the available topics.
        '401':
          description: Valid API key required
        '500':
          description: Internal server error
    post:
      tags:
        - Ticket Topics
      summary: Create a new topic
      description: |
        This endpoint allows the creation of a new topic in the system.

        To create a new topic, the request body must include the following parameters:
        
        - `topic`: The name of the topic.
        
        - `isPublic`: A boolean value indicating whether the topic is publicly visible.
        
        - `dept_id`: The ID of the department associated with this topic. (optional)
        
        - `priority_id`: The ID of the priority associated with this topic. (optional)
        
        - `sla_id`: The ID of the Service-Level Agreement (SLA) associated with the department. (optional)

        If `dept_id`, `priority_id` or `sla_id` aren't provided, the system's default values will be used.

        This endpoint returns the ID of the newly created topic.
      operationId: createTopic
      security:
        - APIKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                topic:
                  type: string
                  description: The name of the topic.
                isPublic:
                  type: boolean
                  description: A boolean value indicating whether the topic is publicly visible.
                dept_id:
                  type: integer
                  description: The ID of the department associated with this topic.
                  nullable: true
                  example: 123
                priority_id:
                  type: integer
                  description: The ID of the priority associated with this topic.
                  nullable: true
                  example: 4
                sla_id:
                  type: integer
                  description: The ID of the Service-Level Agreement (SLA) associated with the department.
                  nullable: true
                  example: 1
                  required:
                    - topic
                    - isPublic
      responses:
        '201':
          description: Topic created successfully
          content:
            application/json:
              schema:
                type: integer
                example: 7
                description: The ID of the newly created Topic.
        '400':
          description: Syntax error, malformed JSON
        '401':
          description: Valid API key required
        '500':
          description: Internal server error
    put:
      tags:
        - Ticket Topics
      summary: Update an existing topic
      description: |
        This endpoint allows the update of an existing topic in the system.

        To update a topic, the request body must include the following parameters:
        
        - `id`: The topic's ID.
        
        - `topic`: The name of the topic. (optional)
        
        - `ispublic`: A boolean value indicating whether the topic is publicly visible. (optional)
        
        - `dept_id`: The ID of the department associated with this topic. (optional)
        
        - `priority_id`: The ID of the priority associated with this topic. (optional)
        
        - `sla_id`: The ID of the Service-Level Agreement (SLA) associated with the department. (optional)

        NOTE: All updatable properties are optional, meaning, the client can choose which properties to update.
        If no updatable property is provided, an error message will be returned.
      operationId: updateTopic
      security:
        - APIKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: The topic's ID.
                topic:
                  type: string
                  description: The name of the topic.
                ispublic:
                  type: boolean
                  description: A boolean value indicating whether the topic is publicly visible.
                dept_id:
                  type: integer
                  description: The ID of the department associated with this topic.
                  nullable: true
                  example: 123
                priority_id:
                  type: integer
                  description: The ID of the priority associated with this topic.
                  nullable: true
                  example: 4
                sla_id:
                  type: integer
                  description: The ID of the Service-Level Agreement (SLA) associated with the department.
                  nullable: true
                  example: 1
                  required:
                    - id
      responses:
        '204':
          description: Topic updated successfully
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          description: Valid API key required
        '500':
          description: Internal server error
    delete:
      tags:
        - Ticket Topics
      summary: Delete an existing topic
      description: |
        This endpoint allows the deletion of an existing topic in the system.

        To delete a topic, provide the topic's ID, `id`, as a query parameter.
      operationId: deleteTopic
      security:
        - APIKeyAuth: []
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          description: The ID of the topic to be deleted.
          required: true
      responses:
        '204':
          description: Topic deleted successfully
        '400':
          description: Invalid query parameter
        '401':
          description: Valid API key required
        '404':
          description: Topic not found
        '500':
          description: Internal server error
  /https://host/osTicketBase/http.php/users.json:
    description: This resource handles all user-related operations
    get:
      tags:
        - Users
      summary: Get user IDs
      description: |
        This endpoint retrieves the IDs of all users in the system.
        
        User IDs are unique identifiers assigned to each user.

        The response will include an array of user IDs.

        NOTE: For ease of identification, user names are provided alongside their respective IDs in
        the response.
      operationId: getUserIds
      security:
        - APIKeyAuth: []
      responses:
        '200':
          description: User IDs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                    example:
                      - id: 1
                        name: "User A"
                      - id: 2
                        name: "User B"
                      - id: 3
                        name: "User C"
                description: |
                  The IDs and names of the available users.
        '401':
          description: Valid API key required
        '500':
          description: Internal server error
    post:
      tags:
        - Users
      summary: Create a new user
      description: |
        This endpoint allows the creation of a new user in the system.

        To create a new user, the request body must include the following parameters:
        
        - `name`: The user's name.
        
        - `email`: The user's email address.

        This endpoint returns the ID and the initial password of the newly created user.
      operationId: createUser
      security:
        - APIKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The user's name.
                email:
                  type: string
                  format: email
                  description: The user's email address.
              required:
                - name
                - email
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                    description: The ID of the newly created user.
                  passwd:
                    type: string
                    description: The password of the newly created user.
                description: The ID and password of the newly created user.
        '400':
          description: Syntax error, malformed JSON
        '401':
          description: Valid API key required
        '500':
          description: Internal server error
    put:
      tags:
      - Users
      summary: Update an existing user
      description: |
        This endpoint allows the update of a user in the system.

        To update a user, the request body may include the following parameters:
        
        - `userId`: The ID of the user to update.
        
        - `name`: The user's name. (optional)
        
        - `email`: The user's email address. (optional)

        NOTE: All updatable properties are optional, meaning, the client can choose which properties to update.
        If no updatable property is provided, an error message will be returned.
      operationId: updateUser
      security:
        - APIKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: The ID of the user to update.
                name:
                  type: string
                  description: The user's name.
                email:
                  type: string
                  format: email
                  description: The user's email address.
              required:
                - userId
      responses:
        '204':
          description: User updated successfully
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          description: Valid API key required
        '404':
          description: User not found
        '500':
          description: Internal server error
    delete:
      tags:
        - Users
      summary: Delete an existing user
      description: |
        This endpoint allows the deletion of an existing user in the system.

        To delete a user, provide the user's ID, `userId`, as a query parameter.
      operationId: deleteUser
      security:
        - APIKeyAuth: []
      parameters:
        - in: query
          name: userId
          schema:
            type: integer
          description: The ID of the user to be deleted.
          required: true
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: Invalid query parameter
        '401':
          description: Valid API key required
        '404':
          description: User not found
        '500':
          description: Internal server error
components:
  securitySchemes:
    APIKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  responses:
    BadRequest:
      description: Syntax error, missing ID or missing updatable properties
      content:
        text/plain:
          schema:
            type: string
          examples:
            syntax_error:
              value: Syntax error, malformed JSON
            missing_properties:
              value: Missing updatable properties
            missing_id:
              value: Missing required ID
    BadRequest2:
      description: Syntax error or invalid name
      content:
        text/plain:
          schema:
            type: string
          examples:
            syntax_error:
              value: Syntax error, malformed JSON
            invalid_name:
              value: "name: Department already exists"
    BadRequest3:
      description: Syntax error, missing ID, missing updatable properties or invalid name
      content:
        text/plain:
          schema:
            type: string
          examples:
            syntax_error:
              value: Syntax error, malformed JSON
            missing_properties:
              value: Missing updatable properties
            missing_id:
              value: Missing required ID
            invalid_name:
              value: "name: Department already exists"
